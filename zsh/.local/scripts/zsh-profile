#!/usr/bin/env python3
# Copyright 2018 Jamiel Almeida
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Very unpolished script to read xtrace'd zsh startup with PROMPT4 like:
    PROMPT4="%D{%s.%6.}:%x:%I: "

It then calculates each step's delta to show how much time was consumed by
which files in the zsh startup process.
"""

import collections
import datetime
import operator
import os
import re
import sys

TWO_ONE = operator.itemgetter(1, 0)

LINE_RE_STR = (
    r'(?P<ts_str>\d+\.\d+):(?P<fname>[^\s]*):(?P<linenum>\d+):'
    r'\s*'
    r'(?P<text>.*)$'
)
LINE_RE = re.compile(LINE_RE_STR)


def file_stream(filepath):
  with open(filepath, 'r') as in_file:
    for linenum, line in enumerate(in_file):
      if line.endswith('\n'):
        line = line[:-1]
      yield (filepath, linenum), line


def show_report(results_dict):
  for in_file, prof_results in sorted(results_dict.items()):
    print(in_file)
    for script, time in sorted(prof_results.items(), key=TWO_ONE, reverse=True):
      if time == 0:
        continue
      print('{t:19.6f}  {s}'.format(t=time, s=script))


def read_trace(filepath):
  file_results = {}
  file_total = 0

  prev_ts = None
  for _, line in file_stream(filepath):
    match = LINE_RE.match(line)
    if not match:
      continue
    ts_str, fname, _, _ = match.groups()
    file_results.setdefault(fname, 0)
    ts = float(ts_str)
    if prev_ts is None:
      prev_ts = ts

    delta = abs((ts - prev_ts))
    file_results[fname] += delta
    file_total += delta

    prev_ts = ts

  return file_results, file_total


def process(filenames):
  results = collections.OrderedDict()
  files = [os.path.abspath(filename) for filename in sorted(filenames)]
  for filepath in files:
    result_store = results.setdefault(filepath, {})
    results_for_file, total = read_trace(filepath)
    result_store.update(results_for_file)
    result_store['total'] = total
  return results


if __name__ == '__main__':
  run_results = process(sys.argv[1:])
  show_report(run_results)
