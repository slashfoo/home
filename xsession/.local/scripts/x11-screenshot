#!/usr/bin/env zsh
# Copyright 2018 Jamiel Almeida
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

setopt err_exit
setopt err_return
setopt pipe_fail
unsetopt unset

typeset VERBOSE="${VERBOSE:-}"

case "${VERBOSE}" in
    0) ;& [Nn]{,[Oo]}) ;& [Ff]{,[Aa][Ll][Ss][Ee]) ;& '')
        VERBOSE='no';;
    *)
        VERBOSE='yes';;
esac

if [[ "${VERBOSE}" == 'yes' ]]; then
    setopt xtrace
fi

# https://github.com/naelstrof/maim
command -v maim >/dev/null 2>&1 || exit

# https://github.com/naelstrof/slop
command -v slop >/dev/null 2>&1 || exit

typeset TIMESTAMP_FMT='%D{%Y-%m-%dT%H:%M:%S.%6.}'

typeset FILE_TIMESTAMP_FMT='%D{%Y-%m-%dT%H%M%S.%3.}'
typeset DEST_DIR="${HOME}/Pictures"
typeset FILEPATH=''
typeset FORCE='no'

typeset WHOLE_SCREEN='yes'
typeset UPLOAD_URL=

unsetopt err_exit err_return
typeset SCRIPT_NAME="${0:t}"
typeset USAGE_MSG
typeset HELP_MSG
read -r -d '' USAGE_MSG <<-EOUSAGE
	Usage:	${SCRIPT_NAME} [OPTIONS] [FILEPATH]
	      	${SCRIPT_NAME} -x
	      	${SCRIPT_NAME} -h
EOUSAGE

read -r -d '' HELP_MSG <<-EOHELP
	Takes as screenshot from the display, optionally uploading to a specified
	URL. If uploading a url for the uploaded screenshot is copied to the
	clipboard, otherwise the full path to the generated file is copied.

	Examples:
	    # Save full screenshot to the default directory.
	    ${SCRIPT_NAME} -x

	    # Save a partial screenshot (mouse-selection) to ./img/screenshot.jpg
	    ${SCRIPT_NAME} -s ./img/screenshot.jpg

	    # Save full screenshot and upload to http://my-screenshots.local
	    ${SCRIPT_NAME} -u 'http://my-screenshots.local'

	Arguments:
	      	FILEPATH     	If specified, the screenshot will be saved to this
	      	             	path. When not specified the filename used will
	      	             	be the current timestamp formatted as prescribed by
	      	             	ISO 8601, followed by '_' (underscore character),
	      	             	the word 'screenshot', and have an extension of
	      	             	'png'.

	      	             	Example:
	      	             	    2018-11-28T113839.864_screenshot.png

	Options:
	      	-d DEST_DIR  	Directory to save the screenshot's to when a
	      	             	filepath is not specified.
	      	             	Defaults to: "${DEST_DIR}"
	      	-f           	Write screenshot even if the file already exists.
	      	-s           	Allow selection of region/window for a partial
	      	             	screenshot.
	      	-u UPLOAD_URL	URL to use when uploading the screenshot.
	      	             	After a successful upload, notify-send is used to
	      	             	notify the screenshot is uploaded, and the url
	      	             	copied to the clipboard using xclip.
	      	-v           	Show messages detailing steps of the execution.
	      	             	This flag will be enabled and the xtrace shell
	      	             	option will be set if env variable VERBOSE is set
	      	             	doesn't match the glob patterns: '' (blank), 0,
	      	             	[Nn], [Nn][Oo], [Ff], [Ff][Aa][Ll][Ss][Ee]
	      	-x           	Execute the script even if there are no specified
	      	             	command-line arguments or options.
	      	-h           	Show this help message.
EOHELP
setopt err_exit err_return

error-msg () {
    {
        setopt local_options
        unsetopt xtrace
    } >/dev/null 2>&1
    echo -n "Error: " >&2
    echo "${@}" >&2
    echo '' >&2
    print-usage
    exit 1
}

debug-msg () {
    {
        setopt local_options
        unsetopt xtrace
    } >/dev/null 2>&1
    if [[ "${#}" -eq 0 ]] || [[ "${VERBOSE}" != 'yes' ]]; then
        return
    fi
    echo -n "> ${(%):-${TIMESTAMP_FMT}} | " >&2
    echo "${@}" >&2
}

debug-cat () {
    {
        setopt local_options
        unsetopt xtrace
    } >/dev/null 2>&1
    if [[ "${VERBOSE}" != 'yes' ]]; then
        return
    fi
    local IFS=''
    if [[ ! -t 0 ]]; then
        local line
        while read -r line; do
            debug-msg "${line}"
        done
    fi
    while [[ "${#}" -gt 0 ]]; do
        local filename="${1:-}"; shift
        if [[ ! -s "${filename}" ]]; then
            debug-msg "File ${filename:a} does not exist, or is blank."
            continue
        fi
        local line
        debug-msg "BEGINNING OF CONTENTS OF ${filename:a}"
        while read -r line; do
            debug-msg "${line}"
        done < <(nl -ba -w6 -nrn "${filename}")
        debug-msg "      END OF CONTENTS OF ${filename:a}"
    done
}

print-usage () {
    {
        setopt local_options
        unsetopt xtrace
    } >/dev/null 2>&1
    echo "${USAGE_MSG}" >&2
}

print-help () {
    {
        setopt local_options
        unsetopt xtrace
    } >/dev/null 2>&1
    local pager="${PAGER:-$(command -v less 2>/dev/null)}"
    if [[ -z "${pager:-}" ]]; then
        pager='cat'
    fi
    {
        echo "${USAGE_MSG}"
        echo ''
        echo "${HELP_MSG}"
    } | ${pager}
}

typeset -i RETCODE=0
typeset DO_RUN='no'
typeset -a ARGUMENTS=()
while [[ "${#}" -gt 0 ]]; do

    typeset -i10 OPTIND=0
    while getopts ":vxhd:fu:s" opt; do
        case "${opt}" in
            h)
                print-help; exit 0;;
            v)
                VERBOSE='yes'; DO_RUN='yes';;
            x)
                DO_RUN='yes';;
            d)
                DEST_DIR="${OPTARG}"; DO_RUN='yes';;
            f)
                FORCE='yes'; DO_RUN='yes';;
            s)
                WHOLE_SCREEN='no'; DO_RUN='yes';;
            u)
                UPLOAD_URL="${OPTARG}"; DO_RUN='yes';;
            :)
                error-msg "'-${OPTARG}' requires a parameter";;
            \?)
                error-msg "'-${OPTARG}' is not a valid option/argument.";;
        esac
    done
    shift $(( OPTIND - 1 ))

    [[ "${#}" -ge 1 ]] || break
    ARGUMENTS+=( "${1}" )
    shift
done
unset opt
unset OPTIND
unset OPTERR
unset OPTARG

if [[ "${#}" -eq 0 ]] && [[ "${DO_RUN}" != 'yes' ]]; then
    print-usage
    exit 0
fi

if [[ "${#ARGUMENTS[@]}" -gt 1 ]]; then
    error-msg "Only one filename can be specified."
fi

FILEPATH="${ARGUMENTS[1]:-}"
if [[ -z "${FILEPATH}" ]]; then
    FILEPATH="${DEST_DIR}/${(%)FILE_TIMESTAMP_FMT}_screenshot.png"
else
    FILEPATH="${FILEPATH:a}"
    DEST_DIR="${FILEPATH:h}"
fi

typeset -a maim_cmd=( "${${:-maim}:c}" )
if [[ "${WHOLE_SCREEN}" == 'no' ]]; then
    maim_cmd+=( --select --hidecursor )
fi
maim_cmd+=(
    --quality=10
    --noopengl
    --delay=0.1
    --quiet
    --tolerance=10
    --padding=10
    --bordersize=3
    --color=0.0,0.15,0.3,0.35
    --highlight "${FILEPATH}"
)

debug-cat <<-EOMSG
	Execution parameters:
	    $(typeset VERBOSE)
	    $(typeset DEST_DIR)
	    $(typeset FILEPATH)
	    $(typeset FORCE)
	    $(typeset UPLOAD_URL)
	    $(typeset WHOLE_SCREEN)
	    $(typeset maim_cmd)
EOMSG

debug-msg "Ensuring destination directory exists"
debug-msg $(mkdir --verbose --parents --mode='u=rwx,go=' "${DEST_DIR}")

if [[ -f "${FILEPATH}" ]] && [[ "${FORCE}" != 'yes' ]]; then
    error-msg "File at ${FILEPATH} already exists"
fi

debug-msg "Taking screenshot"
debug-msg $("${maim_cmd[@]}")
if [[ ! -f "${FILEPATH}" ]]; then
    notify-send --urgency=critical --expire-time=1500 \
        "Failed to capture screenshot"
    error-msg "Failed to capture screenshot"
fi

if [[ -n "${UPLOAD_URL}" ]]; then
    debug-msg "Uploading screenshot to ${UPLOAD_URL}"
    typeset SCRNSHT_URL="$(
        curl --silent --form "imagedata=@${FILEPATH}" "${UPLOAD_URL}" || :
    )"
    if [[ -z "${SCRNSHT_URL}" ]]; then
        error-msg "Failed to upload screenshot to provided url"
    fi
    debug-msg "Screenshot uploaded and now located at ${SCRNSHT_URL}"
    xclip -in -selection clipboard <<<"${SCRNSHT_URL}" || :
else
    xclip -in -selection clipboard <<<"${FILEPATH}" || :
fi
notify-send --urgency=normal --expire-time=1500 "Screenshot captured"
